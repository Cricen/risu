# Copyright (c) 2010-2012 Arxopia LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Arxopia LLC nor the names of its contributors
#     	may be used to endorse or promote products derived from this software
#     	without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ARXOPIA LLC BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
#OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
#OF THE POSSIBILITY OF SUCH DAMAGE.

module Risu
	module Templates
		class Assets_new2 < Risu::Base::TemplateBase

			#
			#
			def initialize ()
				@template_info =
				{
					:name => "assets_new2",
					:author => "hammackj",
					:version => "0.0.1",
					:description => "Generates a Assets Summary Report"
				}
			end

			# @todo comment
			#
			def render(output)
				output.font_size 10

				output.text Report.classification.upcase, :align => :center
				output.text "\n"

				output.font_size(22) do
					output.text Report.title, :align => :center
				end

				output.font_size(18) do
					output.text "Networked Assets", :align => :center
					output.text "\n"
					output.text "This report was prepared by\n#{Report.author}", :align => :center
				end

				output.text "\n\n"
					
				# admin = Array.new
				# admin = System_admin.find_by_sql("SELECT * FROM system_admins INNER JOIN hosts ON system_admins.id = hosts.system_admin_id")
				# sys_admin = Array.new	
				# admin = System_admin.joins('LEFT OUTER JOIN hosts ON hosts.system_admin_id = system_admins.id').first.admin

				# admin = sys_admin.where(

			#admin = ActiveRecord::Base.connection.select_all('SELECT system_admins.admin FROM system_admins INNER JOIN hosts ON system_admins.host_id = hosts.system_admin_id')	


			#SystemAdmin.admin.each do |admin|
				#output.text "Host: #{admins}\n"
                        	#output.text "Admin: #{system_admin.admin}\n\n"
			#end

			

			#output.text "Test: #{admins.first.system_admin.admin}"

			#hosts = Host.joins(:system_admin)

			sys = SystemAdmin.joins(:department)

    			hosts = Host.find_by_sql("SELECT * FROM hosts INNER JOIN system_admins ON hosts.system_admin_id = system_admins.id INNER JOIN departments ON system_admins.department_id = departments.id ORDER BY departments.department_name ASC")

			hosts.each do |host| 
				output.text "Name: #{host.name}\n"
				output.text "FQDN: #{host.fqdn}\n" unless host.fqdn == nil
				output.text "IP Address: #{host.ip}\n" unless host.ip == nil
				output.text "NetBios: #{host.netbios}\n" unless host.netbios == nil
				output.text sprintf "Mac Address: %s\n", host.mac.chomp.gsub("\n", ", ") unless host.mac == nil
				output.text sprintf "Operation System: %s\n", host.os.chomp.gsub("\n", "/") unless host.os == nil
				output.text "Admin: #{host.system_admin.admin}\n"
				output.text "Department: #{host.department_name}\n\n"
			end
	

=begin
			Host.sorted.each do |host|

					getadmin = Host.joins(:system_admin).all

					a = getadmin.first.system_admin.admin

					output.text "Name: #{host.name}\n"
					output.text "FQDN: #{host.fqdn}\n" unless host.fqdn == nil
					output.text "IP Address: #{host.ip}\n" unless host.ip == nil
					output.text "NetBios: #{host.netbios}\n" unless host.netbios == nil
					output.text sprintf "Mac Address: %s\n", host.mac.chomp.gsub("\n", ", ") unless host.mac == nil
					output.text sprintf "Operation System: %s\n", host.os.chomp.gsub("\n", "/") unless host.os == nil
					output.text "System admin: #{a}\n"
					output.text "\n"

				end
=end
			end
		end
	end
end

