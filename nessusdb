#!/usr/bin/env ruby

# nessusdb - A Nessus XML parser
# 
# hammackj -  07-25-2010 - Version 1.0 of nessusdb complete. 
#

base = __FILE__
$:.unshift(File.join(File.dirname(base), 'lib'))

$stdout.sync = true
$stderr.sync = true

require 'nessusdb'

module NessusDB

	# Main NessusDB class, wraps around all of the command line usage
	#
	# @author Jacob Hammack
	class NessusDB
		PROGRAM_VERSION = "1.0"
		
		#
		#
		def initialize
		end
		
		# Initiator for [ActiveRecord] migrations.
		#
		def self.migrate(direction)
			begin
				ActiveRecord::Base.establish_connection(YAML::load(File.open('database.yml')))

				if File.exists?("database.yml") == false
					puts "[!] Could not find database.yml!"
					exit
				end

				Schema.migrate(direction)
			rescue => ex
				puts "[!] Error during migration - #{ex.message}"
			end
		end
		
		# Main function, parses command line arguments and parses each .nessus file passed on the
		# command line. All data will be parsed into the database specified by the database.yml file.
		# Each file will be parsed as seperate policy / reports.
		#
		def main	
			Choice.options do
				banner sprintf 'NessusDB - v%s', PROGRAM_VERSION
				header 'Jacob Hammack'
		    header 'http://hammackj.com'
		  	header 'Usage: nessusdb [OPTIONS] files'
		    header ''

		    option :create_tables do
		      short '-c'
		      long '--create-tables'
		      desc 'Create database tables'
					action do
						NessusDB.migrate(:up)
						puts "[*] Successfully created tables."
						exit
					end
		    end		

		    option :drop_tables do
		      short '-d'
		      long '--drop-tables'
		      desc 'Drop database tables'
					action do
						NessusDB.migrate(:down)
						puts "[*] Successfully dropped tables."
						exit
					end
		    end
		
				option :create_config do
		      short '-f'
		      long '--create-config'
		      desc 'Creates an empty database config file'
					action do
						if File.exists?("database.yml") == false
							File.open("database.yml", 'w+') do |f| 
								f.write("adapter: \nhost: \nport: \ndatabase: \nusername: \npassword: \ntimeout: \n") 
							end

							puts "[*] An empty database.yml has been created. Please edit and fill in the correct values."
							exit
						else
							puts "[!] database.yml already exists. Please delete it if you wish to create it."
							exit
						end
					end
		    end

		    option :help do
		      short ''
		      long '--help'
		      desc 'Show this message'
		    end

		    option :version do
		      short '-v'
		      long '--version'
		      desc 'Show version'
		      action do
		        puts "NessusDB - Executive Summary Generator v#{PROGRAM_VERSION}"
		        exit
		      end
		  	end
		
				footer ''
			end

			if ARGV.length == 0
			  puts Choice.help
			end
			
			begin
				ARGV.each do |arg| 
				  begin
				    	puts "[*] Parsing #{arg}..."
				    	tstart = Time.new
				    	parser = LibXML::XML::SaxParser.file arg
				    	parser.callbacks = NessusSaxListener.new
				    	parser.parse
				    	printf "[*] Finished parsing %s. Parse took %.02f seconds\n", arg, Time.now - tstart

				  rescue Interrupt => i
				  	puts "[!] Parse cancelled!"
				  rescue => e
				    puts "[!] Error: #{arg}"
				    next
				  end  
				end
			rescue Interrupt => i
				puts "[!] Caught Interrupt parse cancelled!"
			end
		end
	end
end	

app = NessusDB::NessusDB.new
app.main
