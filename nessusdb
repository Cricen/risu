#!/usr/bin/env ruby

# nessusdb - A Nessus XML parser
# 
# hammackj -  07-25-2010 - Version 1.0 of nessusdb complete. 
#

base = __FILE__
$:.unshift(File.join(File.dirname(base), 'lib'))

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'libxml'
require 'choice'

require 'nessusdb'

module NessusDB
	
	
	class NessusDB
		
		def initialize
		end
		
		def main	
			Choice.options do
				banner sprintf 'NessusDB - v%s', PROGRAM_VERSION
				header 'Jacob Hammack'
		    header 'http://hammackj.com'
		  	header 'Usage: nessusdb [OPTIONS]'
		    header ''

		    option :create_tables do
		      short '-c'
		      long '--create-tables'
		      desc 'Create database tables'
		    end		

		    option :drop_tables do
		      short '-d'
		      long '--drop-tables'
		      desc 'Drop database tables'
		    end
		
				option :create_config do
		      short '-f'
		      long '--create-config'
		      desc 'Creates an empty database config file'
		    end

		    option :help do
		      short ''
		      long '--help'
		      desc 'Show this message'
		    end

		    option :version do
		      short '-v'
		      long '--version'
		      desc 'Show version'
		      action do
		        puts "NessusDB - Executive Summary Generator v#{PROGRAM_VERSION}"
		        exit
		      end
		  	end
		
		
			end
		end
	end
end	
	#add debug mode for output

	#pass each .nessus file to be pasrsed into the database on the command line
	#each will be parsed into the database as seperate policy/reports

	puts "NessusDB Parser v1.0\nJacob Hammack\nhttp://hammackj.com\n\n"

	begin
	ARGV.each { |arg| 
	  begin
	    	puts "[*] Parsing #{arg}..."
	    	tstart = Time.new
	    	parser = LibXML::XML::SaxParser.file arg
	    	parser.callbacks = NessusSaxListener.new
	    	parser.parse
	    	printf "[*] Finished parsing %s. Parse took %.02f seconds\n", arg, Time.now - tstart

	  rescue Interrupt => i
	  	puts "[!] Parse cancelled!"
	  rescue => e
	    puts "[!] Error: #{arg}"
	  	#puts "An error occurred: #{e}"
	  	#puts "Backtrace: #{e.backtrace.join("\n")}"
	    next
	  end  
	}
	rescue Interrupt => i
		puts "[!] Parse cancelled!"
	end
end